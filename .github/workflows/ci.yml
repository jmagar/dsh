name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: |
          npm run type-check -w frontend
          npm run type-check -w backend
          npm run type-check -w shared

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --production

      - name: Check for vulnerable dependencies
        run: |
          npm audit fix --production --dry-run || true
          npm audit --audit-level=critical || exit 1

      - name: Run memory leak detection
        run: |
          npm install -g memwatch-next
          npm run test:memory-leaks || true

  database:
    name: Database Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dsh_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma migrations
        run: |
          npm run prisma:generate
          npm run prisma:migrate -- --name ci_test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dsh_test

      - name: Run database tests
        run: npm run test:db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dsh_test

  frontend:
    name: Frontend Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run frontend linting
        run: npm run lint:frontend

      - name: Run frontend unit tests with coverage
        run: npm run test:frontend -- --coverage --coverageThreshold='{"global":{"branches":"80","functions":"80","lines":"80","statements":"80"}}'

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          start: npm start
          wait-on: 'http://localhost:3000'
          browser: chrome
          config: video=false,screenshotOnRunFailure=false

      - name: Run accessibility tests
        run: |
          npm install -g pa11y-ci
          pa11y-ci --config frontend/.pa11yci

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

      - name: Analyze bundle size
        run: |
          npm run build:frontend
          npx bundlesize --config frontend/bundlesize.config.json

  backend:
    name: Backend Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dsh_test
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: npm ci

      - name: Run backend linting
        run: npm run lint:backend

      - name: Run backend unit tests with coverage
        run: npm run test:backend -- --coverage --coverageThreshold='{"global":{"branches":"80","functions":"80","lines":"80","statements":"80"}}'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dsh_test
          REDIS_URL: redis://localhost:6379

      - name: Run API contract tests
        run: |
          npm install -g dredd
          dredd backend/api-docs.yml http://localhost:3000

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dsh_test
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend performance tests
        run: |
          npm run build:frontend
          npm install -g lighthouse
          lighthouse http://localhost:3000 --output json --output html --output-path ./frontend/lighthouse-report
        env:
          NODE_ENV: production

      - name: Run backend load tests
        run: |
          npm install -g autocannon
          autocannon -c 100 -d 30 -p 10 http://localhost:3000/api/health
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dsh_test
          REDIS_URL: redis://localhost:6379

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            frontend/lighthouse-report
            backend/load-test-results

  docker:
    name: Docker Build
    needs: [type-check, security, database, frontend, backend, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: dsh-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          load: true
          tags: dsh-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build agent
        uses: docker/build-push-action@v5
        with:
          context: ./agent
          push: false
          load: true
          tags: dsh-agent:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix for cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
